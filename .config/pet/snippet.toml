[[snippets]]
  description = "find files that have '10' recursively"
  command = "grep -l '^10$' -R"
  output = ""

[[snippets]]
  description = "count unique words in a file by lines"
  command = "cat <file_name> | sort | uniq -c"
  output = ""

[[snippets]]
  description = "create symlink"
  command = "ln -s <real_file(dir)_path> <symlink_path>"
  output = ""

[[snippets]]
  description = "unlink <symlink_path>"
  command = "remove symlink"
  output = ""

[[snippets]]
  description = "filter lines by regexp"
  command = "seq 5 | awk '/[24]/'"
  output = ""

[[snippets]]
  description = "三項演算子 by awk"
  command = "seq 5 | awk '{r=$1%2 ? \"奇数\":\"偶数\"; print r}'"
  output = ""

[[snippets]]
  description = "print just first line by awk"
  command = "seq 5 | awk 'NR==1 {print $1}'"
  output = ""

[[snippets]]
  description = "basic usage of sed"
  command = "echo foobar | sed 's/bar/baz/'"
  output = ""

[[snippets]]
  description = "summary lines by awk BEGIN-END"
  command = "seq 5 | awk 'BEGIN{a=0}$1%2==0{print $1,\"偶数\"}$1%2{print $1,\"奇数\"}{a+=$1}END{print \"合計\",a}'"
  output = ""

[[snippets]]
  description = "\"tail -f\" by less"
  command = "less +F <file_name>"
  output = ""

[[snippets]]
  description = "awk by specified separator string"
  command = "echo \"1,2,3,4\\n5,6,7,8\" | awk -F',' '{print $2,$4}'"
  output = ""

[[snippets]]
  description = "extract by from-to condition of sed"
  command = "seq 10 | sed -n '/2/,/6/p'"
  output = ""

[[snippets]]
  description = "find fonts"
  command = "fc-list"
  output = ""

[[snippets]]
  description = "find files that have '10' recursively by ripgrep"
  command = "rg -l '^10$'"
  output = ""

[[snippets]]
  description = "find commands that can execute by current login user"
  command = "sudo -l"
  output = ""

[[snippets]]
  description = "find commands that can execute by group"
  command = "sudo -l -g <group_name>"
  output = ""

[[snippets]]
  description = "find opened files by a process"
  command = "ls /proc/<process_id>/fd"
  output = ""

[[snippets]]
  description = "find openned files by a process"
  command = "lsof -c <process_name>"
  output = ""

[[snippets]]
  description = "show network communication status on this server"
  command = "netstat -anp"
  output = ""

[[snippets]]
  description = "extract logs 2016/12/24 21:00~2016/12/25 03:00"
  command = "cat <log_file_name> | sed -n '/24\\/Dec\\/2016 21:..:../,/25\\/Dec\\/2016 03:..:../p'"
  output = ""

[[snippets]]
  description = "convert line break to space every 3 lines by xargs"
  command = "seq 10 | xargs -n3"
  output = ""

[[snippets]]
  description = "concurrent execute by xargs"
  command = "seq 10 | xargs -P$(nproc)"
  output = ""

[[snippets]]
  description = "use here document"
  command = "cat << END"
  output = ""

[[snippets]]
  description = "substring like operation by parameter expression (変数展開)"
  command = "a=私は俳優よ; echo ${a:0:1}${a:2:2};"
  output = ""

[[snippets]]
  description = "sed like operation by parameter expression (変数展開)"
  command = "a=私は俳優よ; echo ${a/俳優/排骨麺};"
  output = ""

[[snippets]]
  description = "play music by mpv"
  command = "mpv --no-video ."
  output = ""

[[snippets]]
  description = "save a command result to clipboard in Linux"
  command = "echo \"hoge\" | xclip -selection c"
  output = ""

[[snippets]]
  description = "arithmetic operations (四則演算) in shell"
  command = "echo $((1+2))"
  output = ""

[[snippets]]
  description = "declare list in shell"
  command = "a=(\"$SHELL\" \"$LANG\" \"$USER\")"
  output = ""

[[snippets]]
  description = "declare dictionary in shell"
  command = "declare -A b; b[\"SHELL\"]=\"$SHELL\"; b[\"LANG\"]=\"$LANG\"; b[\"USER\"]=\"$USER\""
  output = ""

[[snippets]]
  description = "get string length by parameter expression (変数展開)"
  command = "hoge=\"hoge\"; echo ${#hoge}"
  output = ""

[[snippets]]
  description = "for-loop in shell"
  command = "for x in \"$1\" \"$2\" \"$3\"; do echo $x; done"
  output = ""

[[snippets]]
  description = "while-loop in shell"
  command = "seq 3 | while read x; do echo $x; done"
  output = ""

[[snippets]]
  description = "check previous command's result"
  command = "echo $?"
  output = ""

[[snippets]]
  description = "check previous pipeline's results in zsh"
  command = "echo ${pipestatus[@]}"
  output = ""

[[snippets]]
  description = "check previous pipeline's results in bash"
  command = "echo ${PIPESTATUS[@]}"
  output = ""

[[snippets]]
  description = "handle shell script's parameters as list by \"$@\""
  command = "set aa bb cc; for x in \"$@\"; do echo $x; done"
  output = ""

[[snippets]]
  description = "check if a file exists in shell"
  command = "if [ -e <file_name> ]; then echo \"file exists\"; else echo \"file doesn't exists\"; fi"
  output = ""

[[snippets]]
  description = "compare if numbers are same in shell"
  command = "if [ 1 -eq 1 ]; then echo \"same num\"; else echo \"different num\"; fi"
  output = ""

[[snippets]]
  description = "compare if strings are same in shell"
  command = "if [ 'a' = 'b' ]; then echo \"same str\"; else echo \"different str\"; fi"
  output = ""

[[snippets]]
  description = "read std input in shell script"
  command = "echo $(cat)"
  output = ""

[[snippets]]
  description = "use deafult value if a specified variable is empty by parameter expression (変数展開)"
  command = "echo ${<variable_name>:-\"fuga\"}"
  output = ""

[[snippets]]
  description = "count line break number"
  command = "seq 100 | wc -l"
  output = ""

[[snippets]]
  description = "show all procs with CPU utilization, memory usage"
  command = "ps aux"
  output = ""

[[snippets]]
  description = "show process tree (parent-child relation)"
  command = "pstree -T"
  output = ""

[[snippets]]
  description = "pet search"
  command = "list1=(\"a\", \"b\", \"c\");list2=(\"${list1[@]}\", \"d\");echo ${list2[@]}"
  output = ""

[[snippets]]
  description = "add items to list in shell"
  command = "list1=(\"a\", \"b\", \"c\");list2=(\"${list1[@]}\", \"d\", \"e\");echo ${list2[@]}"
  output = ""

[[snippets]]
  description = "check variable and declare defaul val by parameter expression (変数展開)"
  command = "echo ${hoge:-\"default value\"}"
  output = ""

[[snippets]]
  description = "create string patterns by brace expression (ブレース展開)"
  command = "echo file.{txt,csv}"
  output = ""

[[snippets]]
  description = "treat a command result as a file by process substitution (プロセス置き換え)"
  command = "diff <(echo \"a\\nb\\nc\") <(echo \"a\\nB\\nc\")"
  output = ""

[[snippets]]
  description = "reference prev command"
  command = "!!"
  output = ""

[[snippets]]
  description = "history 20"
  command = "history"
  output = ""

[[snippets]]
  description = "show a command history"
  command = "history <history_length>"
  output = ""

[[snippets]]
  description = "exec a command in history by history number"
  command = "!<history_number>"
  output = ""

[[snippets]]
  description = "dump Brewfile to specified path"
  command = "brew bundle dump --file ./.Brewfile --force"
  output = ""

[[snippets]]
  description = "install brew packages by .Brewfile in specified path"
  command = "brew bundle install --file ./.Brewfile"
  output = ""

[[snippets]]
  description = "generate random high secure passwords"
  command = "pwgen -s -y 20"
  output = ""

[[snippets]]
  description = "compare strings by regexp in if-statement of shell"
  command = "if [[ 'abc' =~ '^a$' ]]; then echo \"same str\"; else echo \"different str\"; fi"
  output = ""

[[snippets]]
  description = "while infinit-loop in shell"
  command = "while :; do sleep 1; echo hoge; done"
  output = ""

[[snippets]]
  description = "list current folder files recursive"
  command = "find -type f"
  output = ""

[[snippets]]
  description = "find recursively files by file name in current folder"
  command = "find . -name \"file_name\""
  output = ""

[[snippets]]
  description = "find files by file name in current folder"
  command = "find . -maxdepth 1 -name \"file_name\""
  output = ""

[[snippets]]
  description = "remove lines by grep"
  command = "echo \"a\\nb\\nc\" | grep -v '^[ab]'"
  output = ""

[[snippets]]
  description = "replace string by tr command"
  command = "echo \"a, b, c, d\" | tr ',' '|'"
  output = ""

[[snippets]]
  description = "delete string by tr command"
  command = "echo \"a, b, c, d\" | tr -d ','"
  output = ""

[[snippets]]
  description = "show available java environment in ArchLinux"
  command = "archlinux-java status"
  output = ""

[[snippets]]
  description = "set specified java environment as system default in ArchLinux"
  command = "sudo archlinux-java set <java_environment_name>"
  output = ""

[[snippets]]
  description = "register message to slack reminder"
  command = "/remind <#channel_name> <message> <date_time>"
  output = ""

[[snippets]]
  description = "overwrite and create backup file by sed"
  command = "sed -i.bk 's/hoge/fuga/g' hoge.txt"
  output = ""

[[snippets]]
  description = "show calendar"
  command = "cal"
  output = ""

[[snippets]]
  description = "check if swap is happend (see Swap row)"
  command = "free"
  output = ""

[[snippets]]
  description = "check the cause of high load average (CPU utilization(user?, system?), ioawait?)"
  command = "sar <duration> <count>"
  output = ""

[[snippets]]
  description = "check I/O utilization (see %util column)"
  command = "iostat -x"
  output = ""

[[snippets]]
  description = "check load aveages"
  command = "top"
  output = ""

[[snippets]]
  description = "check high memory consuming process (use 'Shift + m' shortcut key)"
  command = "top"
  output = ""

[[snippets]]
  description = "check high CPU utilization (including user, system) processes"
  command = "pidstat"
  output = ""

[[snippets]]
  description = "check high I/O utilization processes (see kB_rd/s、kB_wr/s)"
  command = "pidstat -d"
  output = ""

[[snippets]]
  description = "execute a coomand in cycles"
  command = "watch <command>"
  output = ""

[[snippets]]
  description = "just check syntax errors in a command (the command is not executed)."
  command = "bash -n <command>"
  output = ""

[[snippets]]
  description = "cut by delimiter and specify columns range"
  command = "echo \"1:user1:root\\n2:user2:normal\\n3:user3:root\" | cut -d ':' -f 2-"
  output = ""

[[snippets]]
  description = "show variables which start by \"FOO\""
  command = "echo ${!FOO*}"
  output = ""

[[snippets]]
  description = "reverse each line"
  command = "echo \"12345\\nabcde\" | rev"
  output = ""

[[snippets]]
  description = "output to stdout and file by tee command"
  command = "echo \"abcdefg\" | tee <file_name>"
  output = ""

[[snippets]]
  description = "write oneliner by Python"
  command = "cat hoge.txt | python -c 'import sys; [print(a.strip()) for a in sys.stdin]'"
  output = ""

[[snippets]]
  description = "count length of each line"
  command = "cat speech.txt | awk '{print length($1), $1}'"
  output = ""

[[snippets]]
  description = "find files which are created at 30 or more days before."
  command = "find . -ctime +30"
  output = ""

[[snippets]]
  description = "find files by multiple conditions with -or option (-and option is also able to use)"
  command = "find . -ctime +30 -or -name hoge"
  output = ""

[[snippets]]
  description = "show disk utilization"
  command = "df -h"
  output = ""

[[snippets]]
  description = "show disk utilization of the specified folder"
  command = "du -h ."
  output = ""

[[snippets]]
  description = "check network utilization of each process"
  command = "sudo nethogs"
  output = ""

[[snippets]]
  description = "grep and show only words matched by regex"
  command = "echo 'abc1def2gh3' | grep -oE '[1-9]+'"
  output = ""

[[snippets]]
  description = "output system call log by strace"
  command = "strace -o <strace_log_file_name> <command_name>"
  output = ""

[[snippets]]
  description = "display information about ELF file(実行可能ファイル)"
  command = "readelf -h <executable_file>"
  output = ""

[[snippets]]
  description = "show only unique rows"
  command = "echo \"a\\na\\nb\\nc\" | uniq -u"
  output = ""

[[snippets]]
  description = "skip evaluating column 1 by uniq command"
  command = "echo \"1 a\\n2 a\\n3 b\\n4 c\" | uniq -f1 -c"
  output = ""

[[snippets]]
  description = "wrap all matched string by 全体マッチ of sed"
  command = "echo \"私はラーメンが好きです。\\nラーメンうまい。\" | sed 's/ラーメン/「&」/g'"
  output = ""

[[snippets]]
  description = "show logical cpu count"
  command = "grep -c processor /proc/cpuinfo"
  output = ""

[[snippets]]
  description = "show reminder list of the skack channel"
  command = "/remind list"
  output = ""

[[snippets]]
  description = "delete local git branch"
  command = "git branch -d <branch_name>"
  output = ""

[[snippets]]
  description = "check Line Break Code (改行コード) of the file ($: LF, ^M: CR)"
  command = "cat -e <fine_name>"
  output = ""

[[snippets]]
  description = "format table"
  command = "echo 'hoge 1000\\nfoo 200\\nfugafuga 10' | column -t"
  output = ""

[[snippets]]
  description = "parse csv by python csv package"
  command = "echo '\"1\",\"\"\"2\"\"\",3\\n4,5,6' | python -c 'import csv,sys;[print(x[1]) for x in csv.reader(sys.stdin)]'"
  output = ""

[[snippets]]
  description = "convert txt format or apply formatter by pandoc"
  command = "cat table.md | pandoc -t gfm"
  output = ""

[[snippets]]
  description = "show 10 days ago date by date command"
  command = "date -d '10 days ago'"
  output = ""

[[snippets]]
  description = "show 10 days later date by date command"
  command = "date -d '10 days'"
  output = ""

[[snippets]]
  description = "show date specified by time zone"
  command = "TZ=UTC date"
  output = ""

[[snippets]]
  description = "replace parameter string by xargs"
  command = "seq 4 | xargs -I@ echo '@ days'"
  output = ""

[[snippets]]
  description = "show a date 10 days later from 2017-02-14"
  command = "date -d '2017-02-14 10 days'"
  output = ""

[[snippets]]
  description = "compare only first 7 caracters by uniq command"
  command = "seq 0 10 | xargs -I@ date '+%F' -d '2017-02-24 @day' | uniq -w7"
  output = ""

[[snippets]]
  description = "do startsWith by cut command"
  command = "echo \"2021-12-01\\n2021-12-02\" | cut -c 1-7"
  output = ""

[[snippets]]
  description = "convert hex to decimal number in bash"
  command = "echo $(( 16#101e ))"
  output = ""

[[snippets]]
  description = "separate string by 4 words with sed"
  command = "echo \"1111111111111111\" | sed -E 's/.{4}/& /g'"
  output = ""

[[snippets]]
  description = "separate chars by new line (改行) with grep -o"
  command = "echo \"あいうえお\" | grep -o ."
  output = ""

[[snippets]]
  description = "show byte length by wc"
  command = "echo あ | wc -c"
  output = ""

[[snippets]]
  description = "show emoji by unicode"
  command = "echo -e '\\U1F363\\U1F37A'"
  output = ""

[[snippets]]
  description = "check caracter code(文字コード) of the file"
  command = "file -i <file_name>"
  output = ""

[[snippets]]
  description = "echo unicode codepoints of emoji"
  command = "echo 🍣🍺 | iconv -f UTF-8 -t UCS-4 | xxd -p | fold -b8"
  output = ""

[[snippets]]
  description = "encode a bianry file to base64"
  command = "base64 <binary_file_name>"
  output = ""

[[snippets]]
  description = "generate sha256 hash of a file"
  command = "sha256sum <file_name>"
  output = ""

[[snippets]]
  description = "convert binary number to hex"
  command = "echo 11100100 | sed 's/^/obase=16;ibase=2;/' | bc"
  output = ""

[[snippets]]
  description = "add prefix string by sed"
  command = "echo \"hoge\\nfuga\" | sed '1s/^/[prefix]/'"
  output = ""

[[snippets]]
  description = "decompress gz file"
  command = "gzip -d <gz file name>"
  output = ""

[[snippets]]
  description = "check Line Break Code (改行コード) of the file"
  command = "cat newline.txt | tr -dc '\\015\\012' | sed -z 's/\\x0d/CR/g;s/\\x0a/LF&/g' | sort | uniq -c"
  output = ""

[[snippets]]
  description = "filter rows by sed (just show 1~3 rows)"
  command = "seq 5 | sed -n '1,3p'"
  output = ""

[[snippets]]
  description = "filter rows by sed (just show 2~ rows)"
  command = "seq 5 | sed -n '2,$p'"
  output = ""

[[snippets]]
  description = "filter rows by sed (just show 1行目から2行飛ばし)"
  command = "seq 10 | sed -n '1~2p'"
  output = ""

[[snippets]]
  description = "encode str to base64 string"
  command = "echo \"hoge\" | base64"
  output = ""

[[snippets]]
  description = "decode base64 string"
  command = "echo \"aG9nZQo=\" | base64 -d"
  output = ""

[[snippets]]
  description = "infnity loop by seq"
  command = "pref"
  output = ""

[[snippets]]
  description = "split each char and do something by awk"
  command = "seq -w 0 10 | awk -F \"\" '{print $1*$1+$2*$2}'"
  output = ""

[[snippets]]
  description = "setup slack reacji-channeler (emoji reaction)"
  command = "/reacji-channeler <target_emoji like :mega:> <channel_name like #big-news>"
  output = ""

[[snippets]]
  description = "reset working directory to HEAD"
  command = "git restore <file_name>"
  output = ""

[[snippets]]
  description = "checkout tags to branch"
  command = "git checkout -b <branch_name> refs/tags/<tag_name>"
  output = ""

[[snippets]]
  description = "sort rows by second column values"
  command = "echo \"bar 30\\nhogehoge 3\\nhoge 2\\nfuga 1\" | sort -k 2,2"
  output = ""

[[snippets]]
  description = "sort files by created at (DESC)"
  command = "ls -ltr"
  output = ""

[[snippets]]
  description = "list files with full created at"
  command = "ls --full-time"
  output = ""

[[snippets]]
  description = "rename current git branch"
  command = "git branch -m <new_branch_name>"
  output = ""

[[snippets]]
  description = "modify artifact version of pom.xml by mvn command"
  command = "mvn versions:set -DnewVersion=<artifact_version>"
  output = ""

[[snippets]]
  description = "show dependency tree of the mevan project"
  command = "mvn dependency:tree"
  output = ""

[[snippets]]
  description = "shuffle passed lines"
  command = "seq 5 | shuf"
  output = ""

[[snippets]]
  description = "check required shared library of the command"
  command = "ldd /usr/bin/tail"
  output = ""

[[snippets]]
  description = "mount a device"
  command = "mount -t <file system type e.g. vfat> <partition e.g. /dev/sdb1> <mount dir e.g. /mnt/disk1>"
  output = ""

[[snippets]]
  description = "observ usb devices"
  command = "lsusb"
  output = ""

[[snippets]]
  description = "show proc id of the app name"
  command = "pgrep <app_name>"
  output = ""

[[snippets]]
  description = "sabe clipboard contents to a file"
  command = "pbpaste > <filename>"
  output = ""

[[snippets]]
  description = "save a command result to clipboard in Mac"
  command = "echo \"hoge\" | pbcopy"
  output = ""

[[snippets]]
  description = "connect local mysql by mysql client"
  command = "mysql -h 127.0.0.1 -u <user_name> -p <schema_name> -A"
  output = ""

[[snippets]]
  description = "check general_log config of mysql"
  command = "show variables like 'general_log%';"
  output = ""

[[snippets]]
  description = "configure general_log"
  command = "set global general_log = on;"
  output = ""

[[snippets]]
  description = "list changed file of the GitHub pull request"
  command = "gh pr diff <pr_number> --name-only"
  output = ""

[[snippets]]
  description = "get a GitHub personal token configured to use"
  command = "gh auth token"
  output = ""

[[snippets]]
  description = "save git chages to stash"
  command = "git stash -u"
  output = ""

[[snippets]]
  description = "list saved changes of git stash"
  command = "git stash list"
  output = ""

[[snippets]]
  description = "apply git stash of \"stash@{0}\""
  command = "git stash apply stash@{0}"
  output = ""

[[snippets]]
  description = "checkout specified file of the branch"
  command = "git checkout <branch_name> -- <file_name>"
  output = ""

[[snippets]]
  description = "get absolute path"
  command = "realpath <path>"
  output = ""

[[snippets]]
  description = "format mysql datetime type value to yyyy-mm-dd string"
  command = "DATE_FORMAT(<date_time_column>, '%Y-%m-%d')"
  output = ""

[[snippets]]
  description = "show ip address of devices"
  command = "ip address"
  output = ""

[[snippets]]
  description = "show terminal emulator's configs"
  command = "stty -a"
  output = ""

[[snippets]]
  description = "show the shared libraries that the program depends on."
  command = "ldd <program_path>"
  output = ""

[[snippets]]
  description = "add prefix string by sed ver2"
  command = "echo \"hoge\" | sed 's/.*/prefix_&/g'"
  output = ""

[[snippets]]
  description = "echo string by unicode"
  command = "echo -e '\\U30B7\\U30A7\\U30EB'"
  output = ""

[[snippets]]
  description = "start http server by python"
  command = "python -m http.server 8000"
  output = ""

[[snippets]]
  description = "start telnet server by nc"
  command = "nc -l -p 8080"
  output = ""

[[snippets]]
  description = "send text on telnet by bash feature"
  command = "echo \"hoge\" > /dev/tcp/127.0.0.1/8080"
  output = ""

[[snippets]]
  description = "generate random number (0~255)"
  command = "shuf -i 0-255 -n 1"
  output = ""

[[snippets]]
  description = "shuffle and increace by shuf command"
  command = "seq 0 5 | shuf -rn 10"
  output = ""

[[snippets]]
  description = "show specified row's text"
  command = "seq 1 10 | head -n 4 | tail -n 1"
  output = ""

[[snippets]]
  description = "joint multiple text files"
  command = "paste <file_1> <file_2> <file_3>"
  output = ""

[[snippets]]
  description = "show files modified and unstaged"
  command = "git ls-files -m"
  output = ""

[[snippets]]
  description = "restore a file managed by git to previous commit"
  command = "git restore -s HEAD^ <file_name>"
  output = ""

[[snippets]]
  description = "echo same row 2 times"
  command = "seq 5 | sed p"
  output = ""

[[snippets]]
  description = "remove first row and final row by sed"
  command = "seq 5 | sed '1d;$d'"
  output = ""

[[snippets]]
  description = "exec command passed by string"
  command = "bash -c 'echo \"hoge\"'"
  output = ""

[[snippets]]
  description = "connect server with ssh"
  command = "ssh <user_name>@<host_name>"
  output = ""

[[snippets]]
  description = "request to http server and just get http status"
  command = "curl -s -o /dev/null -w '%{http_code}' https://www.google.co.jp"
  output = ""

[[snippets]]
  description = "request to a http server (support redirect)"
  command = "curl -IL https://google.co.jp"
  output = ""

[[snippets]]
  description = "tail docker compose woking on background log"
  command = "docker compose logs -f"
  output = ""

[[snippets]]
  description = "start docker compose with Dockerfile build"
  command = "docker compose up --build"
  output = ""

[[snippets]]
  description = "reset docker enrvironment"
  command = "docker system prune -a"
  output = ""

[[snippets]]
  description = "show emoji by bytecode(Hex)"
  command = "echo -e '\\xF0\\x9F\\x91\\x8D'"
  output = ""

[[snippets]]
  description = "show auto_increment id values of tables"
  command = "SELECT table_name, auto_increment FROM information_schema.tables ORDER BY auto_increment DESC;"
  output = ""

[[snippets]]
  description = "open binary file by hexyl(HEX viewer)"
  command = "hexyl <binary_file>"
  output = ""

[[snippets]]
  description = "show diff by delta(enhanced diff)"
  command = "delta <file1> <file2>"
  output = ""

[[snippets]]
  description = "generate regex"
  command = "grex a b c d"
  output = ""

[[snippets]]
  description = "syntax highlight source file"
  command = "bat <source file>"
  output = ""

[[snippets]]
  description = "find processes using the port_number"
  command = "lsof -i:<port_number>"
  output = ""

[[snippets]]
  description = "list configured JVM system properties"
  command = "jcmd <PID_of_JVM> VM.system_properties"
  output = ""

[[snippets]]
  description = "checkout a file in a specified branch"
  command = "git checkout <branch_name> -- <file_path>"
  output = ""

[[snippets]]
  description = "install maven wrapper (mvnw)"
  command = "mvn wrapper:wrapper"
  output = ""

[[snippets]]
  description = "copy tmux(byobu) save-buffer to clipoard"
  command = "tmux save-buffer - | xclip -selection c"
  output = ""

[[snippets]]
  description = "if there is no hoge file, create hoge file"
  command = "[ -e hoge ] || touch hoge"
  output = ""

[[snippets]]
  description = "tfenv install"
  command = "install specific version of terraform by tfenv"
  output = ""

[[snippets]]
  description = "ssh login by SSM SessionManager"
  command = "aws ssm start-session --target <instance_id> --document-name SSM-SessionManagerRunShell"
  output = ""

[[snippets]]
  description = "dump mysql database"
  command = "mysqldump -h <host> -u <user> -p <database> > <dump_file_name>"
  output = ""

[[snippets]]
  description = "import mysql dump file"
  command = "mysql -h <host> -u <user> -p <database> < <dump_file_name>"
  output = ""

[[snippets]]
  description = "create new Python project by pipenv"
  command = "pipenv install"
  output = ""

[[snippets]]
  description = "install python package in pipenv project"
  command = "pipenv install <package_name>"
  output = ""

[[snippets]]
  description = "execute python command in pipenv project"
  command = "pipenv run <some_python_command>"
  output = ""

[[snippets]]
  description = "use matched string in sed string replacement"
  command = "echo \"Time: 22.000 sec\" | sed -E 's/Time: (.*) sec/\\1/'"
  output = ""

[[snippets]]
  description = "add line end (改行) each 2 rows"
  command = "echo \"1\\n2\\n3\\n4\\n5\\n6\" | awk 'NR % 2 == 0 {print $0 \"\\n\"} NR % 2 != 0 {print $0}'"
  output = ""

[[snippets]]
  description = "check if a file exists in shell (short hands)"
  command = "[ -e <file_name> ] && echo \"file exists\""
  output = ""

[[snippets]]
  description = "convert unix time to datetime by strftime of awk"
  command = "echo \"1, 1560000000\\n2, 1703160585\" | awk -F',' '{print $1, strftime(\"%Y-%m-%d %H:%M:%S\", $2)}'"
  output = ""
